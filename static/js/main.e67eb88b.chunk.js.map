{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","details","id","name","username","email","robots_url","className","src","alt","CardList","robo_list","map","robot","key","SearchBox","onInput","ype","placeholder","Scroll","props","style","overflowY","height","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onInputSearchRobots","event","search_field","target","value","fetch","then","response","json","users","filteredList","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAsBeA,EAnBF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACJC,EAA0BD,EAA1BC,GAAGC,EAAuBF,EAAvBE,KAAKC,EAAkBH,EAAlBG,SAASC,EAASJ,EAATI,MAElBC,EAAU,+BAA2BJ,EAA3B,iBAChB,OAEI,yBAAKA,GAAIA,EAAIK,UAAU,mDACnB,yBAAKC,IAAKF,EAAYG,IAAKL,IAC3B,6BACI,4BAAKD,GACL,2BAAIE,MCCLK,EARE,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAEhB,OACeA,EALHC,KAAI,SAACC,GAAD,OAAW,kBAAC,EAAD,CAAMC,IAAKD,EAAMX,GAAKD,QAASY,QCa/CE,EAdG,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAEhB,OACI,oCACI,2BACAC,IAAI,SACJC,YAAY,gBACZF,QAASA,EACTT,UAAU,uCCCPY,EATA,SAACC,GACZ,OACI,yBAAKlB,GAAG,mBACRmB,MAAO,CAACC,UAAU,SAASC,OAAO,QAAQC,OAAO,oBAC5CJ,EAAMK,WCgBJC,E,kDApBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAIG,KAAKJ,MAAMC,SACJ,iDAEJG,KAAKX,MAAMK,a,GAhBCQ,aCiEZC,G,wDAzDX,aAAe,IAAD,8BACV,gBAoBJC,oBAAsB,SAACC,GACnB,EAAKJ,SAAS,CAAEK,aAAcD,EAAME,OAAOC,SApB3C,EAAKZ,MAAQ,CACThB,UAAW,GACX0B,aAAc,IAJR,E,gEAQO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MACG,SAAAG,GACI,EAAKZ,SAAS,CAAErB,UAAWiC,S,+BAWjC,IAAD,OACCC,EAAed,KAAKJ,MAAMhB,UAAUmC,QAAO,SAACjC,GAC9C,OAAOA,EAAMV,KAAK4C,cAAcC,SAAS,EAAKrB,MAAMU,aAAaU,kBAErE,OAAIhB,KAAKJ,MAAMhB,UAAUsC,OAAS,EACtB,oCAEJ,yBAAK/C,GAAG,iBAAiBK,UAAU,kBAC/B,wBAAIA,UAAU,MAAd,UACA,kBAAC,EAAD,CAAWS,QAASe,KAAKI,uBAE7B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,UAAWkC,OAQ7B,oCACI,gD,GAjDFZ,c,MCGEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAMP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.e67eb88b.chunk.js","sourcesContent":["import React from 'react';\r\n//import '../css/Hello.css';\r\n\r\nconst Card = ({details}) => {\r\n    const {id,name,username,email} = details\r\n  \r\n    const robots_url = `https://robohash.org/${id}?size=200x200`\r\n    return (\r\n\r\n        <div id={id} className='bg-light-blue dib br4 pa3 ma2 bw3 grow shadow-5'>\r\n            <img src={robots_url} alt={username} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n//import '../css/Hello.css';\r\nconst RenderList = (list) => {\r\n    return list.map((robot) => <Card key={robot.id}  details={robot} />)\r\n};\r\nconst CardList = ({ robo_list }) => {\r\n    \r\n    return (\r\n        RenderList(robo_list)\r\n    )\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({onInput}) => {\r\n\r\n    return (\r\n        <>\r\n            <input \r\n            ype='search' \r\n            placeholder='Search robots'\r\n            onInput={onInput}\r\n            className='pa2 ba b--green bg-lightest-blue'/>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n// import '../css/Scroll.css';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div id='scroll-container' \r\n        style={{overflowY:\"scroll\",height:'500px',border:'2px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError) {\r\n            return(<h1>Error errroooooor</h1>)\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundy from './ErrorBoundry';\r\n// import { robots } from '../robots';\r\n\r\nimport '../css/App.css'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robo_list: [],\r\n            search_field: ''\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n            .then(\r\n                users => {\r\n                    this.setState({ robo_list: users });\r\n                }\r\n            )\r\n\r\n\r\n    }\r\n    onInputSearchRobots = (event) => {\r\n        this.setState({ search_field: event.target.value })\r\n\r\n    }\r\n\r\n    render() {\r\n        const filteredList = this.state.robo_list.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(this.state.search_field.toLowerCase())\r\n        })\r\n        if (this.state.robo_list.length > 0) {\r\n            return (<>\r\n\r\n                <div id='search_section' className='fl w-100 p2 tc'>\r\n                    <h1 className='f1'>Titulo</h1>\r\n                    <SearchBox onInput={this.onInputSearchRobots} />\r\n                </div>\r\n                <Scroll>\r\n                    <ErrorBoundy>\r\n                        <CardList robo_list={filteredList} />\r\n                    </ErrorBoundy>\r\n\r\n                </Scroll>\r\n\r\n            </>)\r\n        } else {\r\n            return (\r\n                <>\r\n                    <h1>Cargando...</h1>\r\n                </>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n// import Hello from './components/Hello';\n// import CardList from './components/CardList';\n\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n  // <h1>Holaaaaa</h1>\n  // <Hello saludos={'Saludos desde el index.js goe'}/>\n  <App/>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}